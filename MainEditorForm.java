import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;

// This is the "MAIN" class through which the program enters
public class MainEditorForm extends javax.swing.JFrame {

    /**
     * Creates new form MainEditorForm
     */
    public MainEditorForm() {
        initComponents();
    }
    
    /*
    * MainEditorForm member variables
    */
    private String tilesetPath;
    private TileLoadForm load;
    private ImageIcon buffer = new ImageIcon("C:\\Users\\AAFES\\Desktop\\editorbuffer.png");
    private ImageIcon selector = new ImageIcon("C:\\Users\\AAFES\\Desktop\\selection.png");
    private ImageIcon tileset = null;
    private BufferedImage singleSlice = null;  // Stores the tile the user clicks on
    private BufferedImage multiSlice = null; // Stores the tiles the user drags the mouse over
    // This class allows the user to select multiple tiles be defining the regions the mouse was dragged over
    private class BoundingBox {
        Point begin = null;
        Point end = null;
    }
    
    private BoundingBox boundingBox = new BoundingBox();
    
    // This function should be called whenever a new tileset is loaded in
    private void loadTiles()  {
        // Create the abstract image of the tileset from the file the user choose
        tileset = new ImageIcon(tilesetPath);
        
        // Set the backbuffer of the main editor pane so the user has something to draw ons
        editorBuffer.setIcon(buffer);
        editorBuffer.setText("");
                
        // Ensure that the image is the proper size (multiple of 64x64)
        if(tileset.getIconHeight() % 64 != 0 && tileset.getIconWidth() % 64 != 0) {
            JOptionPane.showMessageDialog(this, "The image height and width must be multiples of 64 pixels.", 
                    "Image Size Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Show the image in the tileset pane
        tileImage.setIcon(tileset);
        tileImage.setText(""); 
    }
    
    public void setTilesPath(String path) {
        tilesetPath = path;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        toolButtonGroup = new javax.swing.ButtonGroup();
        mainEditorPane = new javax.swing.JScrollPane();
        editorBuffer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tilePane = new javax.swing.JScrollPane();
        tileImage = new javax.swing.JLabel();
        tilesetLoadButton = new javax.swing.JButton();
        pencilButton = new javax.swing.JToggleButton();
        bucketButton = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Level Editor v0.1");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(900, 500));

        mainEditorPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        mainEditorPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        editorBuffer.setText("Load a Tileset...");
        editorBuffer.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        editorBuffer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editorBufferMousePressed(evt);
            }
        });
        editorBuffer.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editorBufferMouseDragged(evt);
            }
        });
        mainEditorPane.setViewportView(editorBuffer);

        jLabel1.setText("Layers:");

        tilePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tileImage.setText("Load a Tileset...");
        tileImage.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        tileImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tileImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tileImageMousePressed(evt);
            }
        });
        tileImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tileImageMouseDragged(evt);
            }
        });
        tilePane.setViewportView(tileImage);

        tilesetLoadButton.setText("Load Tileset");
        tilesetLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tilesetLoadButtonActionPerformed(evt);
            }
        });

        toolButtonGroup.add(pencilButton);
        pencilButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pencil.png"))); // NOI18N
        pencilButton.setSelected(true);
        pencilButton.setToolTipText("Pencil");

        toolButtonGroup.add(bucketButton);
        bucketButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bucket.png"))); // NOI18N
        bucketButton.setToolTipText("Fill Bucket");

        jLabel2.setText("Drawing Tools:");

        buttonGroup1.add(jToggleButton1);
        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lowlyr.png"))); // NOI18N
        jToggleButton1.setSelected(true);
        jToggleButton1.setToolTipText("Lower Layer");

        buttonGroup1.add(jToggleButton2);
        jToggleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/midlyr.png"))); // NOI18N
        jToggleButton2.setToolTipText("Middle Layer");

        buttonGroup1.add(jToggleButton3);
        jToggleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hilyr.png"))); // NOI18N
        jToggleButton3.setToolTipText("Upper Layer");

        buttonGroup1.add(jToggleButton4);
        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/evtlyr.png"))); // NOI18N
        jToggleButton4.setToolTipText("Event Layer");

        jMenu1.setText("File");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("New Map");
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Load Map");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save Map");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Save Map As");
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Undo");
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Redo");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tilesetLoadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tilePane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pencilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bucketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 371, Short.MAX_VALUE))
                    .addComponent(mainEditorPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(tilesetLoadButton))
                    .addComponent(jLabel1)
                    .addComponent(jToggleButton3)
                    .addComponent(jToggleButton1)
                    .addComponent(bucketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pencilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jToggleButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tilePane)
                    .addComponent(mainEditorPane, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // If user selects "Exit" from the file menu, then this triggers
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    // If the user hits the "Load Tileset" button this is triggered
    private void tilesetLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tilesetLoadButtonActionPerformed
        load = new TileLoadForm(this);
        //load.pack();
        
        // Allow the user to only select .png image files
        load.fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "png"));
        load.fileChooser.setAcceptAllFileFilterUsed(false);
        load.setLocationRelativeTo(null);
        
        // Show the open dialog to the user and check if they load an image or hit cancel
        if(load.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.loadTiles();
        } else {
            this.tilesetPath = "";
        }
        
    }//GEN-LAST:event_tilesetLoadButtonActionPerformed

    // This function is triggered when the user clicks once on the main editor buffer
    private void editorBufferMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorBufferMousePressed
        // Don't do anything until the user selects a tile to paint with
        if (singleSlice == null && multiSlice == null) { return; }
        
        // Grab the mouse position relative to the main editor buffer
        Point mousePos = evt.getPoint();
        
        // Convert the icon to a bufferedimage of the same dimensions so you can easily manipulate it
        BufferedImage img = new BufferedImage(buffer.getIconHeight(), buffer.getIconWidth(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.drawImage(buffer.getImage(), 0, 0, null);
        
        // Draw the tile to the main editor buffer image (BufferedImage)
        if (singleSlice != null) {
            g.drawImage(singleSlice, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        } else {
            g.drawImage(multiSlice, mousePos.x - (mousePos.x % 64), mousePos.y- (mousePos.y % 64), null);
        }
       
        
        // Now take the modified image and set it back to the original image
        buffer.setImage(img);
        
        // Finally, set the modified image to the main editor pane so the user can see it
        editorBuffer.setIcon(buffer);
        mainEditorPane.repaint(); // Force a redraw so the changes show up
    }//GEN-LAST:event_editorBufferMousePressed

    // This is trigger when the user mouse clicks on a tile
    private void tileImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileImageMousePressed
        // Do nothing until the user loads a tileset
        if (tileset == null) { return; }
        
        boundingBox.begin = evt.getPoint();
        
        if (boundingBox.end == null) {         
            // Grab the mouse position relative to the image
            Point mousePos = evt.getPoint();

            // Convert the tileset icon to a buffered image of the same dimensions so you can easily manipulate it
            BufferedImage img = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics g = img.createGraphics();
            g.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);

            // Use the magic of math to grab the tile the user clicked on and save it to be used elsewhere
            singleSlice = img.getSubimage(mousePos.x - (mousePos.x % 64), 
                                        mousePos.y - (mousePos.y % 64), 64, 64);
            
            // Set the multiSlice to null so that we know we're drawing a single image
            multiSlice = null;

            // Create the select box image
            BufferedImage selectBox = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);
            g = selectBox.createGraphics();
            g.drawImage(selector.getImage(),0,0, null);

            // Now retreive the raw tileset image
            BufferedImage newTiles = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
            g = newTiles.createGraphics();
            g.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);

            // Finally, draw the selector image onto the tileset image
            g.drawImage(selectBox, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);

            // Set the modified tileset as the tileset image
            tileset.setImage(newTiles);

            // Now send the modified image back to the tileset pane
            tileImage.setIcon(tileset);
            tilePane.repaint();
        }
    }//GEN-LAST:event_tileImageMousePressed

    // This function is triggered if the user draws a "Swath" of tiles over the main editor pane
    private void editorBufferMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorBufferMouseDragged
        // If the user hasn't selected a tile, then clicking on the main editor pane should do nothing
        if (singleSlice == null && multiSlice == null) { 
            return; 
        }
        
        // Grab the mouse position relative to the map image buffer
        Point mousePos = evt.getPoint();
        
        // Convert the buffer icon to a buffered image of the same dimensions so you can easily manipulate it
        BufferedImage img = new BufferedImage(buffer.getIconHeight(), buffer.getIconWidth(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.drawImage(buffer.getImage(), 0, 0, null);
        
        // Draw the tile to the main editor buffer image bufferedimage
        if (singleSlice == null) {
            g.drawImage(multiSlice, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        } else {
            g.drawImage(singleSlice, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        }
        // Now take the modified image set it back to the original image
        buffer.setImage(img);
        
        // Finally, set the modified image to the main editor pane so the user can see it and force a redraw of the pane
        editorBuffer.setIcon(buffer);
        mainEditorPane.repaint(); // Force a redraw so the changes show up
    }//GEN-LAST:event_editorBufferMouseDragged

    // Triggered if the user drags the mouse to select multiple tiles
    private void tileImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileImageMouseDragged
        if (tileset == null) { return; }
        
        boundingBox.end = evt.getPoint();
        
        // Set the bounding box to the edges of the selected tiles
        int width, height;
        Point higher = new Point(), lower = new Point();
        higher.x = Math.max(boundingBox.end.x, boundingBox.begin.x);
        higher.y = Math.max(boundingBox.end.y, boundingBox.begin.y);
        lower.x = Math.min(boundingBox.end.x, boundingBox.begin.x);
        lower.y = Math.min(boundingBox.end.y, boundingBox.begin.y);
        
        width = higher.x + (64 - (higher.x % 64)) - (lower.x - (lower.x % 64));
        height = higher.y + (64 - (higher.y % 64)) - (lower.y - (lower.y % 64));

        BufferedImage selectors = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        // Create the image of the selectors
        Graphics graphics = selectors.createGraphics();
        for (int idx = 0; idx < selectors.getWidth() / 64; idx++) {
            for (int iidx = 0; iidx < selectors.getHeight() / 64; iidx++) {
                graphics.drawImage(selector.getImage(), idx * 64, iidx * 64, null);
            }
        }

        // Now retreive the raw tileset image
        BufferedImage rawTiles = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        graphics = rawTiles.createGraphics();
        graphics.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);
        
        // Now grab the tiles that were selected and store them for later use
        multiSlice = rawTiles.getSubimage(lower.x - (lower.x % 64), 
                        lower.y - (lower.y % 64), width, height);     
        
        // Set the single slice to null so that we know we're drawing multiple tiles
        singleSlice = null;

        // Now retreive the raw tileset image again
        BufferedImage newTiles = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        graphics = newTiles.createGraphics();
        graphics.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);

        // Finally, draw the selector image onto the tileset image
        graphics.drawImage(selectors, lower.x - (lower.x % 64), lower.y - (lower.y % 64), null);

        // Set the modified tileset as the tileset image
        tileset.setImage(newTiles);

        // Now send the modified image back to the tileset pane
        tileImage.setIcon(tileset);
        tilePane.repaint();

        boundingBox.end = null;
    }//GEN-LAST:event_tileImageMouseDragged

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainEditorForm form = new MainEditorForm();
                form.setVisible(true);
                form.setLocationRelativeTo(null);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bucketButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel editorBuffer;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JScrollPane mainEditorPane;
    private javax.swing.JToggleButton pencilButton;
    private javax.swing.JLabel tileImage;
    private javax.swing.JScrollPane tilePane;
    private javax.swing.JButton tilesetLoadButton;
    private javax.swing.ButtonGroup toolButtonGroup;
    // End of variables declaration//GEN-END:variables
}
