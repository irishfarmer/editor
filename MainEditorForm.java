import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;

// This is the "MAIN" class through which the program enters
public class MainEditorForm extends javax.swing.JFrame {

    /**
     * Creates new form MainEditorForm
     */
    public MainEditorForm() {
        initComponents();
    }
    
    /*
    * MainEditorForm member variables
    */
    private String tilesetPath;
    private TileLoadForm load;
    private ImageIcon buffer = new ImageIcon("C:\\Users\\AAFES\\Desktop\\editorbuffer.png");
    private ImageIcon selector = new ImageIcon("C:\\Users\\AAFES\\Desktop\\selection.png");
    private ImageIcon tileset = null;
    private BufferedImage slice = null;  // Stores the tile the user clicks on
    
    // This function should be called whenever a new tileset is loaded in
    private void loadTiles()  {
        // Create the abstract image of the tileset from the file the user choose
        tileset = new ImageIcon(tilesetPath);
        
        // Set the backbuffer of the main editor pane so the user has something to draw ons
        editorBuffer.setIcon(buffer);
        editorBuffer.setText("");
                
        // Ensure that the image is the proper size (multiple of 64x64)
        if(tileset.getIconHeight() % 64 != 0 && tileset.getIconWidth() % 64 != 0) {
            JOptionPane.showMessageDialog(this, "The image height and width must be multiples of 64 pixels.", 
                    "Image Size Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Show the image in the tileset pane
        tileImage.setIcon(tileset);
        tileImage.setText(""); 
    }
    
    public void setTilesPath(String path) {
        tilesetPath = path;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainEditorPane = new javax.swing.JScrollPane();
        editorBuffer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tilePane = new javax.swing.JScrollPane();
        tileImage = new javax.swing.JLabel();
        tilesetLoadButton = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainEditorPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        mainEditorPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        editorBuffer.setText("Load a Tileset...");
        editorBuffer.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        editorBuffer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editorBufferMousePressed(evt);
            }
        });
        editorBuffer.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editorBufferMouseDragged(evt);
            }
        });
        mainEditorPane.setViewportView(editorBuffer);

        jLabel1.setText("Layers:");

        tilePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tileImage.setText("Load a Tileset...");
        tileImage.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        tileImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tileImageMousePressed(evt);
            }
        });
        tileImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tileImageMouseDragged(evt);
            }
        });
        tilePane.setViewportView(tileImage);

        tilesetLoadButton.setText("Load Tileset");
        tilesetLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tilesetLoadButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Lower");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Middle");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Upper");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("Events");
        jRadioButton4.setToolTipText("");

        jMenu1.setText("File");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("New Map");
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Load Map");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save Map");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Save Map As");
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Undo");
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Redo");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tilePane, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tilesetLoadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainEditorPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 324, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tilePane, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tilesetLoadButton))
                    .addComponent(mainEditorPane))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    // If user selects "Exit" from the file menu, then this triggers
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          

    // If the user hits the "Load Tileset" button this is triggered
    private void tilesetLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        load = new TileLoadForm(this);
        //load.pack();
        
        // Allow the user to only select .png image files
        load.fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "png"));
        load.fileChooser.setAcceptAllFileFilterUsed(false);
        load.setLocationRelativeTo(null);
        
        // Show the open dialog to the user and check if they load an image or hit cancel
        if(load.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.loadTiles();
        } else {
            this.tilesetPath = "";
        }
        
    }                                                 

    // This function is triggered when the user clicks once on the main editor buffer
    private void editorBufferMousePressed(java.awt.event.MouseEvent evt) {
        // Don't do anything until the user selects a tile to paint with
        if (slice == null) { 
            JOptionPane.showMessageDialog(this, "Nope!");
            return; 
        }
        
        // Grab the mouse position relative to the main editor buffer
        Point mousePos = evt.getPoint();
        
        // Convert the icon to a bufferedimage of the same dimensions so you can easily manipulate it
        BufferedImage img = new BufferedImage(buffer.getIconHeight(), buffer.getIconWidth(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.drawImage(buffer.getImage(), 0, 0, null);
        
        // Draw the tile to the main editor buffer image bufferedimage
        g.drawImage(slice, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        
        // Now take the modified image and set it back to the original image
        buffer.setImage(img);
        
        // Finally, set the modified image to the main editor pane so the user can see it
        editorBuffer.setIcon(buffer);
        mainEditorPane.repaint(); // Force a redraw so the changes show up
    }

    // This is trigger when the user mouse clicks on a tile
    private void tileImageMousePressed(java.awt.event.MouseEvent evt) {
        // If no tileset has been selected, then don't do anything
        if (tileset == null) { return; }
        
        // Grab the mouse position relative to the image
        Point mousePos = evt.getPoint();
        
        // Convert the tileset icon to a buffered image of the same dimensions so you can easily manipulate it
        BufferedImage img = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);
        
        // Use the magic of math to grab the tile the user clicked on and save it to be used elsewhere
        slice = img.getSubimage(mousePos.x - (mousePos.x % 64), 
                                    mousePos.y - (mousePos.y % 64), 64, 64);
        
        // Create the select box image
        BufferedImage selectBox = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);
        g = selectBox.createGraphics();
        g.drawImage(selector.getImage(),0,0, null);
        
        // Now retreive the raw tileset image
        BufferedImage newTiles = new BufferedImage(tileset.getIconWidth(), tileset.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        g = newTiles.createGraphics();
        g.drawImage(new ImageIcon(tilesetPath).getImage(), 0, 0, null);
        
        // Finally, draw the selector image onto the tileset image
        g.drawImage(selectBox, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        
        // Set the modified tileset as the tileset image
        tileset.setImage(newTiles);
        
        // Now send the modified image back to the tileset pane
        tileImage.setIcon(tileset);
        tilePane.repaint();
    }

    // In the future, this function will allow the user to paint with multiple tiles
    private void tileImageMouseDragged(java.awt.event.MouseEvent evt) {
        
    }

    // This function is triggered if the user draws a "Swath" of tiles over the main editor pane
    private void editorBufferMouseDragged(java.awt.event.MouseEvent evt) {
        // If the user hasn't selected a tile, then clicking on the main editor pane should do nothing
        if (slice == null) { 
            return; 
        }
        
        // Grab the mouse position relative to the map image buffer
        Point mousePos = evt.getPoint();
        
        // Convert the icon to a buffered image of the same dimensions so you can easily manipulate it
        BufferedImage img = new BufferedImage(buffer.getIconHeight(), buffer.getIconWidth(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.createGraphics();
        g.drawImage(buffer.getImage(), 0, 0, null);
        
        // Draw the tile to the main editor buffer image bufferedimage
        g.drawImage(slice, mousePos.x - (mousePos.x % 64), mousePos.y - (mousePos.y % 64), null);
        
        // Now take the modified image set it back to the original image
        buffer.setImage(img);
        
        // Finally, set the modified image to the main editor pane so the user can see it and force a redraw of the pane
        editorBuffer.setIcon(buffer);
        mainEditorPane.repaint(); // Force a redraw so the changes show up
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainEditorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainEditorForm form = new MainEditorForm();
                form.setVisible(true);
                form.setLocationRelativeTo(null);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel editorBuffer;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JScrollPane mainEditorPane;
    private javax.swing.JLabel tileImage;
    private javax.swing.JScrollPane tilePane;
    private javax.swing.JButton tilesetLoadButton;
    // End of variables declaration
}
